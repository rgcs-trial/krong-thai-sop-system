-- Restaurant Krong Thai SOP Management System
-- AI-Powered Features Database Schema
-- Migration 037: AI recommendation engine, workflow automation, and predictive analytics

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA "public";
CREATE EXTENSION IF NOT EXISTS "pg_trgm" WITH SCHEMA "public";

-- =====================================================
-- AI RECOMMENDATION ENGINE TABLES
-- =====================================================

-- SOP Recommendation Model Configurations
CREATE TABLE public.ai_model_configs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    model_type TEXT NOT NULL CHECK (model_type IN ('recommendation', 'prediction', 'anomaly_detection', 'skill_matching', 'scheduling')),
    model_name TEXT NOT NULL,
    version TEXT NOT NULL DEFAULT '1.0.0',
    configuration JSONB NOT NULL DEFAULT '{}',
    training_data_config JSONB NOT NULL DEFAULT '{}',
    performance_metrics JSONB NOT NULL DEFAULT '{}',
    is_active BOOLEAN NOT NULL DEFAULT true,
    last_trained_at TIMESTAMPTZ,
    next_training_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- SOP Embeddings for semantic similarity
CREATE TABLE public.sop_embeddings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sop_document_id UUID NOT NULL REFERENCES sop_documents(id) ON DELETE CASCADE,
    embedding_type TEXT NOT NULL CHECK (embedding_type IN ('content', 'title', 'steps', 'combined')),
    embedding VECTOR(1536), -- OpenAI ada-002 embeddings
    metadata JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(sop_document_id, embedding_type)
);

-- User behavior patterns for recommendations
CREATE TABLE public.user_behavior_patterns (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth_users(id) ON DELETE CASCADE,
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    behavior_type TEXT NOT NULL CHECK (behavior_type IN ('sop_access', 'task_completion', 'search_query', 'interaction')),
    behavior_data JSONB NOT NULL DEFAULT '{}',
    context_data JSONB NOT NULL DEFAULT '{}',
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    session_id TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- SOP recommendations generated by AI
CREATE TABLE public.sop_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth_users(id) ON DELETE CASCADE,
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    sop_document_id UUID NOT NULL REFERENCES sop_documents(id) ON DELETE CASCADE,
    recommendation_type TEXT NOT NULL CHECK (recommendation_type IN ('similar', 'next_step', 'skill_based', 'contextual', 'trending')),
    confidence_score DECIMAL(4,3) NOT NULL CHECK (confidence_score >= 0 AND confidence_score <= 1),
    reasoning JSONB NOT NULL DEFAULT '{}',
    context_factors JSONB NOT NULL DEFAULT '{}',
    is_accepted BOOLEAN,
    is_dismissed BOOLEAN DEFAULT false,
    viewed_at TIMESTAMPTZ,
    accepted_at TIMESTAMPTZ,
    dismissed_at TIMESTAMPTZ,
    expires_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- SOP COMPLETION PATTERN ANALYSIS
-- =====================================================

-- SOP completion patterns and analytics
CREATE TABLE public.sop_completion_patterns (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    sop_document_id UUID NOT NULL REFERENCES sop_documents(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth_users(id) ON DELETE SET NULL,
    pattern_type TEXT NOT NULL CHECK (pattern_type IN ('completion_time', 'success_rate', 'error_patterns', 'seasonal', 'difficulty')),
    time_period TEXT NOT NULL CHECK (time_period IN ('hourly', 'daily', 'weekly', 'monthly', 'quarterly')),
    pattern_data JSONB NOT NULL DEFAULT '{}',
    statistical_metrics JSONB NOT NULL DEFAULT '{}',
    insights JSONB NOT NULL DEFAULT '{}',
    confidence_level DECIMAL(4,3) NOT NULL CHECK (confidence_level >= 0 AND confidence_level <= 1),
    sample_size INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- SOP performance predictions
CREATE TABLE public.sop_performance_predictions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    sop_document_id UUID NOT NULL REFERENCES sop_documents(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth_users(id) ON DELETE SET NULL,
    prediction_type TEXT NOT NULL CHECK (prediction_type IN ('completion_time', 'success_probability', 'difficulty_score', 'quality_score')),
    predicted_value DECIMAL(10,4) NOT NULL,
    prediction_range JSONB, -- min/max values
    confidence_interval DECIMAL(4,3) NOT NULL CHECK (confidence_interval >= 0 AND confidence_interval <= 1),
    input_features JSONB NOT NULL DEFAULT '{}',
    model_version TEXT NOT NULL,
    prediction_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    actual_value DECIMAL(10,4),
    accuracy_score DECIMAL(4,3),
    verified_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- WORKFLOW AUTOMATION SYSTEM
-- =====================================================

-- Workflow automation rules and triggers
CREATE TABLE public.workflow_automation_rules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    name_fr TEXT NOT NULL,
    description TEXT,
    description_fr TEXT,
    rule_type TEXT NOT NULL CHECK (rule_type IN ('trigger', 'condition', 'action', 'schedule')),
    trigger_events TEXT[] NOT NULL DEFAULT '{}',
    conditions JSONB NOT NULL DEFAULT '{}',
    actions JSONB NOT NULL DEFAULT '{}',
    priority INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT true,
    execution_count INTEGER NOT NULL DEFAULT 0,
    last_executed_at TIMESTAMPTZ,
    success_rate DECIMAL(4,3) DEFAULT 1.0,
    created_by UUID NOT NULL REFERENCES auth_users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Workflow execution history
CREATE TABLE public.workflow_executions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    rule_id UUID NOT NULL REFERENCES workflow_automation_rules(id) ON DELETE CASCADE,
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    trigger_event TEXT NOT NULL,
    trigger_data JSONB NOT NULL DEFAULT '{}',
    execution_status TEXT NOT NULL CHECK (execution_status IN ('pending', 'running', 'completed', 'failed', 'cancelled')),
    steps_completed INTEGER NOT NULL DEFAULT 0,
    total_steps INTEGER NOT NULL DEFAULT 0,
    execution_log JSONB[] NOT NULL DEFAULT '{}',
    error_messages TEXT[],
    started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    completed_at TIMESTAMPTZ,
    duration_ms INTEGER,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- ANOMALY DETECTION SYSTEM
-- =====================================================

-- SOP anomaly detection and alerts
CREATE TABLE public.sop_anomaly_detections (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    sop_document_id UUID REFERENCES sop_documents(id) ON DELETE SET NULL,
    user_id UUID REFERENCES auth_users(id) ON DELETE SET NULL,
    anomaly_type TEXT NOT NULL CHECK (anomaly_type IN ('performance', 'quality', 'timing', 'compliance', 'pattern')),
    severity_level TEXT NOT NULL CHECK (severity_level IN ('low', 'medium', 'high', 'critical')),
    anomaly_score DECIMAL(4,3) NOT NULL CHECK (anomaly_score >= 0 AND anomaly_score <= 1),
    baseline_metrics JSONB NOT NULL DEFAULT '{}',
    detected_metrics JSONB NOT NULL DEFAULT '{}',
    deviation_analysis JSONB NOT NULL DEFAULT '{}',
    recommended_actions JSONB NOT NULL DEFAULT '{}',
    status TEXT NOT NULL DEFAULT 'detected' CHECK (status IN ('detected', 'investigating', 'resolved', 'false_positive', 'ignored')),
    investigated_by UUID REFERENCES auth_users(id) ON DELETE SET NULL,
    investigated_at TIMESTAMPTZ,
    resolution_notes TEXT,
    resolution_notes_fr TEXT,
    resolved_at TIMESTAMPTZ,
    detected_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- INTEGRATION SYSTEMS
-- =====================================================

-- Kitchen Display System integration
CREATE TABLE public.kitchen_display_integrations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    display_name TEXT NOT NULL,
    display_location TEXT NOT NULL,
    integration_type TEXT NOT NULL CHECK (integration_type IN ('api', 'webhook', 'websocket', 'mqtt')),
    connection_config JSONB NOT NULL DEFAULT '{}',
    sop_categories UUID[] DEFAULT '{}',
    display_settings JSONB NOT NULL DEFAULT '{}',
    is_active BOOLEAN NOT NULL DEFAULT true,
    last_sync_at TIMESTAMPTZ,
    sync_status TEXT DEFAULT 'disconnected' CHECK (sync_status IN ('connected', 'disconnected', 'error', 'syncing')),
    error_log JSONB[] DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- POS System synchronization
CREATE TABLE public.pos_synchronizations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    pos_system_name TEXT NOT NULL,
    pos_version TEXT,
    integration_type TEXT NOT NULL CHECK (integration_type IN ('api', 'file_transfer', 'database', 'webhook')),
    connection_config JSONB NOT NULL DEFAULT '{}',
    sync_frequency TEXT NOT NULL DEFAULT 'real_time' CHECK (sync_frequency IN ('real_time', 'hourly', 'daily', 'manual')),
    data_mappings JSONB NOT NULL DEFAULT '{}',
    last_sync_at TIMESTAMPTZ,
    sync_status TEXT DEFAULT 'inactive' CHECK (sync_status IN ('active', 'inactive', 'error', 'syncing')),
    sync_log JSONB[] DEFAULT '{}',
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- ENVIRONMENTAL AND CONTEXTUAL FACTORS
-- =====================================================

-- Environmental factors affecting SOP performance
CREATE TABLE public.environmental_factors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    factor_type TEXT NOT NULL CHECK (factor_type IN ('weather', 'season', 'events', 'peak_hours', 'staff_levels', 'inventory')),
    factor_data JSONB NOT NULL DEFAULT '{}',
    impact_analysis JSONB NOT NULL DEFAULT '{}',
    sop_adjustments JSONB NOT NULL DEFAULT '{}',
    recorded_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    valid_until TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Staff skill profiles and matching
CREATE TABLE public.staff_skill_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth_users(id) ON DELETE CASCADE,
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    skill_category TEXT NOT NULL,
    skill_name TEXT NOT NULL,
    proficiency_level INTEGER NOT NULL CHECK (proficiency_level >= 1 AND proficiency_level <= 10),
    certification_level TEXT CHECK (certification_level IN ('none', 'basic', 'intermediate', 'advanced', 'expert')),
    last_assessed_at TIMESTAMPTZ,
    assessment_score DECIMAL(4,2),
    training_hours INTEGER DEFAULT 0,
    experience_months INTEGER DEFAULT 0,
    performance_metrics JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, skill_category, skill_name)
);

-- Equipment availability and maintenance
CREATE TABLE public.equipment_availability (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    equipment_name TEXT NOT NULL,
    equipment_type TEXT NOT NULL,
    location TEXT NOT NULL,
    status TEXT NOT NULL CHECK (status IN ('available', 'in_use', 'maintenance', 'broken', 'reserved')),
    availability_schedule JSONB DEFAULT '{}',
    maintenance_schedule JSONB DEFAULT '{}',
    sop_dependencies TEXT[] DEFAULT '{}',
    last_maintenance_at TIMESTAMPTZ,
    next_maintenance_at TIMESTAMPTZ,
    usage_metrics JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- COST TRACKING AND OPTIMIZATION
-- =====================================================

-- SOP cost tracking and analysis
CREATE TABLE public.sop_cost_analytics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    restaurant_id UUID NOT NULL REFERENCES restaurants(id) ON DELETE CASCADE,
    sop_document_id UUID NOT NULL REFERENCES sop_documents(id) ON DELETE CASCADE,
    cost_type TEXT NOT NULL CHECK (cost_type IN ('labor', 'materials', 'equipment', 'utilities', 'waste', 'total')),
    base_cost DECIMAL(10,2) NOT NULL,
    actual_cost DECIMAL(10,2),
    cost_variance DECIMAL(10,2),
    efficiency_score DECIMAL(4,3),
    optimization_suggestions JSONB DEFAULT '{}',
    cost_factors JSONB DEFAULT '{}',
    calculation_method TEXT NOT NULL,
    date_period DATE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- AI Model Configs indexes
CREATE INDEX idx_ai_model_configs_restaurant_type ON ai_model_configs(restaurant_id, model_type);
CREATE INDEX idx_ai_model_configs_active ON ai_model_configs(is_active) WHERE is_active = true;

-- SOP Embeddings indexes
CREATE INDEX idx_sop_embeddings_document ON sop_embeddings(sop_document_id);
CREATE INDEX idx_sop_embeddings_type ON sop_embeddings(embedding_type);
CREATE INDEX idx_sop_embeddings_vector ON sop_embeddings USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- User Behavior Patterns indexes
CREATE INDEX idx_user_behavior_user_restaurant ON user_behavior_patterns(user_id, restaurant_id);
CREATE INDEX idx_user_behavior_type_timestamp ON user_behavior_patterns(behavior_type, timestamp DESC);
CREATE INDEX idx_user_behavior_session ON user_behavior_patterns(session_id) WHERE session_id IS NOT NULL;

-- SOP Recommendations indexes
CREATE INDEX idx_sop_recommendations_user_active ON sop_recommendations(user_id) WHERE is_dismissed = false;
CREATE INDEX idx_sop_recommendations_restaurant_type ON sop_recommendations(restaurant_id, recommendation_type);
CREATE INDEX idx_sop_recommendations_confidence ON sop_recommendations(confidence_score DESC);

-- Completion Patterns indexes
CREATE INDEX idx_sop_completion_patterns_restaurant_sop ON sop_completion_patterns(restaurant_id, sop_document_id);
CREATE INDEX idx_sop_completion_patterns_type_period ON sop_completion_patterns(pattern_type, time_period);
CREATE INDEX idx_sop_completion_patterns_confidence ON sop_completion_patterns(confidence_level DESC);

-- Performance Predictions indexes
CREATE INDEX idx_sop_performance_predictions_restaurant_sop ON sop_performance_predictions(restaurant_id, sop_document_id);
CREATE INDEX idx_sop_performance_predictions_type_date ON sop_performance_predictions(prediction_type, prediction_date DESC);
CREATE INDEX idx_sop_performance_predictions_accuracy ON sop_performance_predictions(accuracy_score DESC) WHERE accuracy_score IS NOT NULL;

-- Workflow Automation indexes
CREATE INDEX idx_workflow_automation_rules_restaurant_active ON workflow_automation_rules(restaurant_id) WHERE is_active = true;
CREATE INDEX idx_workflow_automation_rules_type ON workflow_automation_rules(rule_type);
CREATE INDEX idx_workflow_executions_rule_status ON workflow_executions(rule_id, execution_status);
CREATE INDEX idx_workflow_executions_restaurant_started ON workflow_executions(restaurant_id, started_at DESC);

-- Anomaly Detection indexes
CREATE INDEX idx_sop_anomaly_detections_restaurant_type ON sop_anomaly_detections(restaurant_id, anomaly_type);
CREATE INDEX idx_sop_anomaly_detections_severity_detected ON sop_anomaly_detections(severity_level, detected_at DESC);
CREATE INDEX idx_sop_anomaly_detections_status ON sop_anomaly_detections(status);

-- Integration indexes
CREATE INDEX idx_kitchen_display_integrations_restaurant_active ON kitchen_display_integrations(restaurant_id) WHERE is_active = true;
CREATE INDEX idx_pos_synchronizations_restaurant_active ON pos_synchronizations(restaurant_id) WHERE is_active = true;

-- Environmental Factors indexes
CREATE INDEX idx_environmental_factors_restaurant_type ON environmental_factors(restaurant_id, factor_type);
CREATE INDEX idx_environmental_factors_recorded ON environmental_factors(recorded_at DESC);

-- Staff Skills indexes
CREATE INDEX idx_staff_skill_profiles_user_category ON staff_skill_profiles(user_id, skill_category);
CREATE INDEX idx_staff_skill_profiles_restaurant_skill ON staff_skill_profiles(restaurant_id, skill_name);
CREATE INDEX idx_staff_skill_profiles_proficiency ON staff_skill_profiles(proficiency_level DESC);

-- Equipment indexes
CREATE INDEX idx_equipment_availability_restaurant_status ON equipment_availability(restaurant_id, status);
CREATE INDEX idx_equipment_availability_type_location ON equipment_availability(equipment_type, location);

-- Cost Analytics indexes
CREATE INDEX idx_sop_cost_analytics_restaurant_sop ON sop_cost_analytics(restaurant_id, sop_document_id);
CREATE INDEX idx_sop_cost_analytics_type_date ON sop_cost_analytics(cost_type, date_period DESC);
CREATE INDEX idx_sop_cost_analytics_efficiency ON sop_cost_analytics(efficiency_score DESC) WHERE efficiency_score IS NOT NULL;

-- =====================================================
-- ROW LEVEL SECURITY POLICIES
-- =====================================================

-- Enable RLS on all AI tables
ALTER TABLE ai_model_configs ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_embeddings ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_behavior_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_completion_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_performance_predictions ENABLE ROW LEVEL SECURITY;
ALTER TABLE workflow_automation_rules ENABLE ROW LEVEL SECURITY;
ALTER TABLE workflow_executions ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_anomaly_detections ENABLE ROW LEVEL SECURITY;
ALTER TABLE kitchen_display_integrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE pos_synchronizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE environmental_factors ENABLE ROW LEVEL SECURITY;
ALTER TABLE staff_skill_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE equipment_availability ENABLE ROW LEVEL SECURITY;
ALTER TABLE sop_cost_analytics ENABLE ROW LEVEL SECURITY;

-- RLS Policies for restaurant-scoped access
CREATE POLICY "ai_model_configs_restaurant_access" ON ai_model_configs
    FOR ALL USING (restaurant_id IN (
        SELECT r.id FROM restaurants r 
        JOIN auth_users u ON u.restaurant_id = r.id 
        WHERE u.id = auth.uid()
    ));

CREATE POLICY "sop_embeddings_restaurant_access" ON sop_embeddings
    FOR ALL USING (sop_document_id IN (
        SELECT sd.id FROM sop_documents sd
        JOIN restaurants r ON sd.restaurant_id = r.id
        JOIN auth_users u ON u.restaurant_id = r.id
        WHERE u.id = auth.uid()
    ));

CREATE POLICY "user_behavior_patterns_restaurant_access" ON user_behavior_patterns
    FOR ALL USING (restaurant_id IN (
        SELECT r.id FROM restaurants r 
        JOIN auth_users u ON u.restaurant_id = r.id 
        WHERE u.id = auth.uid()
    ));

CREATE POLICY "sop_recommendations_user_access" ON sop_recommendations
    FOR ALL USING (user_id = auth.uid() OR restaurant_id IN (
        SELECT r.id FROM restaurants r 
        JOIN auth_users u ON u.restaurant_id = r.id 
        WHERE u.id = auth.uid() AND u.role IN ('admin', 'manager')
    ));

CREATE POLICY "workflow_automation_rules_restaurant_access" ON workflow_automation_rules
    FOR ALL USING (restaurant_id IN (
        SELECT r.id FROM restaurants r 
        JOIN auth_users u ON u.restaurant_id = r.id 
        WHERE u.id = auth.uid()
    ));

-- Add similar policies for other tables...
CREATE POLICY "staff_skill_profiles_restaurant_access" ON staff_skill_profiles
    FOR ALL USING (restaurant_id IN (
        SELECT r.id FROM restaurants r 
        JOIN auth_users u ON u.restaurant_id = r.id 
        WHERE u.id = auth.uid()
    ));

-- =====================================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- =====================================================

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add update triggers
CREATE TRIGGER update_ai_model_configs_updated_at BEFORE UPDATE ON ai_model_configs 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sop_embeddings_updated_at BEFORE UPDATE ON sop_embeddings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sop_completion_patterns_updated_at BEFORE UPDATE ON sop_completion_patterns 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_workflow_automation_rules_updated_at BEFORE UPDATE ON workflow_automation_rules 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_staff_skill_profiles_updated_at BEFORE UPDATE ON staff_skill_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_equipment_availability_updated_at BEFORE UPDATE ON equipment_availability 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sop_cost_analytics_updated_at BEFORE UPDATE ON sop_cost_analytics 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- MATERIALIZED VIEWS FOR ANALYTICS
-- =====================================================

-- SOP Recommendation Analytics
CREATE MATERIALIZED VIEW sop_recommendation_analytics AS
SELECT 
    r.restaurant_id,
    r.recommendation_type,
    DATE(r.created_at) as recommendation_date,
    COUNT(*) as total_recommendations,
    COUNT(*) FILTER (WHERE r.is_accepted = true) as accepted_recommendations,
    COUNT(*) FILTER (WHERE r.is_dismissed = true) as dismissed_recommendations,
    AVG(r.confidence_score) as avg_confidence_score,
    AVG(CASE WHEN r.is_accepted = true THEN r.confidence_score END) as avg_accepted_confidence
FROM sop_recommendations r
WHERE r.created_at >= CURRENT_DATE - INTERVAL '90 days'
GROUP BY r.restaurant_id, r.recommendation_type, DATE(r.created_at);

-- Create index on materialized view
CREATE INDEX idx_sop_recommendation_analytics_restaurant_date 
ON sop_recommendation_analytics(restaurant_id, recommendation_date DESC);

-- Workflow Automation Performance
CREATE MATERIALIZED VIEW workflow_automation_performance AS
SELECT 
    war.restaurant_id,
    war.rule_type,
    DATE(we.started_at) as execution_date,
    COUNT(*) as total_executions,
    COUNT(*) FILTER (WHERE we.execution_status = 'completed') as successful_executions,
    COUNT(*) FILTER (WHERE we.execution_status = 'failed') as failed_executions,
    AVG(we.duration_ms) as avg_duration_ms,
    AVG(we.steps_completed::float / NULLIF(we.total_steps, 0)) as avg_completion_rate
FROM workflow_automation_rules war
JOIN workflow_executions we ON war.id = we.rule_id
WHERE we.started_at >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY war.restaurant_id, war.rule_type, DATE(we.started_at);

-- Create index on workflow performance view
CREATE INDEX idx_workflow_automation_performance_restaurant_date 
ON workflow_automation_performance(restaurant_id, execution_date DESC);

-- Schedule materialized view refreshes
-- Note: In production, these should be refreshed via cron jobs or scheduled functions